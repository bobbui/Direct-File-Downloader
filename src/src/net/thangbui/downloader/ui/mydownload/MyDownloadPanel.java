/*
 * Copyright (c) 2013, Bui Nguyen Thang, thang.buinguyen@gmail.com, thangbui.net. All rights reserved.
 * Licensed under the GNU General Public License version 2.0 (GPLv2)
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
 */

package net.thangbui.downloader.ui.mydownload;

import net.thangbui.downloader.controller.DownloadController;
import net.thangbui.downloader.domain.Download;
import net.thangbui.downloader.ui.MainUI;
import org.apache.log4j.Logger;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Nguyen Thang
 */
public class MyDownloadPanel extends javax.swing.JPanel {

    private static final Logger LOG = Logger.getLogger(MyDownloadPanel.class);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private       javax.swing.JTable                                     allDownloadTable;
    private final JPanel                                                 self;
    private       int                                                    currentFilter;
    private       List<Download>                                         allDownloads;
    private       List<Download>                                         currentDisplayDownloads;
    private       javax.swing.JScrollPane                                jScrollPane1;
    private       net.thangbui.downloader.ui.mydownload.MyDownloadFilter myDownloadFilter1;
    public MyDownloadPanel() {
        initComponents();
        self = this;
//        jButton1.setHorizontalTextPosition(JButton.RIGHT);
//        jButton1.setHorizontalAlignment(SwingConstants.LEFT);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        allDownloadTable = new javax.swing.JTable();
        myDownloadFilter1 = new net.thangbui.downloader.ui.mydownload.MyDownloadFilter();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        allDownloadTable.setAutoCreateRowSorter(true);
        allDownloadTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "", "Name", "Size", "Status", "", "Speed", "ETA", ""
                }
        ) {
            final Class[] types = new Class[]{
                    java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            final boolean[] canEdit = new boolean[]{
                    true, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        allDownloadTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        allDownloadTable.setRowHeight(43);
        allDownloadTable.setRowSelectionAllowed(false);
        allDownloadTable.setSelectionBackground(new java.awt.Color(204, 204, 204));
        allDownloadTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(allDownloadTable);
        allDownloadTable.getColumnModel().getColumn(0).setMinWidth(44);
        allDownloadTable.getColumnModel().getColumn(0).setPreferredWidth(44);
        allDownloadTable.getColumnModel().getColumn(0).setMaxWidth(44);
        allDownloadTable.getColumnModel().getColumn(0).setCellEditor(new StopResumeCellRenderer(new JCheckBox()));
        allDownloadTable.getColumnModel().getColumn(0).setCellRenderer(new StopResumeCellRenderer(new JCheckBox()));
        allDownloadTable.getColumnModel().getColumn(2).setMinWidth(100);
        allDownloadTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        allDownloadTable.getColumnModel().getColumn(2).setMaxWidth(100);
        allDownloadTable.getColumnModel().getColumn(3).setMinWidth(100);
        allDownloadTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        allDownloadTable.getColumnModel().getColumn(4).setMinWidth(150);
        allDownloadTable.getColumnModel().getColumn(4).setPreferredWidth(150);
        allDownloadTable.getColumnModel().getColumn(4).setMaxWidth(150);
        allDownloadTable.getColumnModel().getColumn(4).setCellEditor(new net.thangbui.downloader.ui.mydownload.ProgressCellRenderer());
        allDownloadTable.getColumnModel().getColumn(4).setCellRenderer(new net.thangbui.downloader.ui.mydownload.ProgressCellRenderer());
        allDownloadTable.getColumnModel().getColumn(5).setMinWidth(80);
        allDownloadTable.getColumnModel().getColumn(5).setPreferredWidth(80);
        allDownloadTable.getColumnModel().getColumn(6).setMinWidth(80);
        allDownloadTable.getColumnModel().getColumn(6).setPreferredWidth(80);
        allDownloadTable.getColumnModel().getColumn(7).setMinWidth(40);
        allDownloadTable.getColumnModel().getColumn(7).setPreferredWidth(40);
        allDownloadTable.getColumnModel().getColumn(7).setMaxWidth(40);
        allDownloadTable.getColumnModel().getColumn(7).setCellEditor(new net.thangbui.downloader.ui.mydownload.RemoveButtonCellRenderer(new JCheckBox()));
        allDownloadTable.getColumnModel().getColumn(7).setCellRenderer(new net.thangbui.downloader.ui.mydownload.RemoveButtonCellRenderer(new JCheckBox()));

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
        add(myDownloadFilter1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents
    // End of variables declaration//GEN-END:variables

    private void updateData() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) allDownloadTable.getModel();
        for (int i = defaultTableModel.getRowCount() - 1; i >= 0; i--) {
            defaultTableModel.removeRow(i);
        }
        for (Download download : currentDisplayDownloads) {
            //TODO: hard code temporary for action collumn
            download.refreshStatus();
            defaultTableModel.addRow(new Object[]{
                    //stop, resume icon
                    download,
                    //Name
                    download.title,
                    //size
                    download.size,
                    //status
                    download.state,
                    //progress
                    download,
                    //speed
                    download.speed,
                    //ETA
                    download.ETA,
                    //DeleteOrOpen
                    download
            });
        }
    }

    private void updateDataNotReAdded() {
        DefaultTableModel model = (DefaultTableModel) allDownloadTable.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            if (currentDisplayDownloads.size() == i) {
                break;
            }
            Download download = currentDisplayDownloads.get(i);
            try {
                download.refreshStatus();
//            model.setValueAt(download.title, i, 1);
//            model.setValueAt(download.size, i, 2);
                model.setValueAt(download.state, i, 3);
                model.setValueAt(download, i, 4);
                model.setValueAt(download.speed, i, 5);
                model.setValueAt(download.ETA, i, 6);
                if (download.stateChanged) {
                    System.out.println("state changed to " + download.dm.getState());
                    //stop, resume , open download
                    model.setValueAt(download, i, 0);
                    // delete open download
                    model.setValueAt(download, i, 7);
                }
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("null at row " + i);
            }
        }
        getCategoryCount();
    }

    public void refreshCompletely() {
        currentDisplayDownloads = allDownloads = DownloadController.getStatusFromCore();
        filter(-1);
        setVisible(true);
        new UpdateDownloadStatusThread().start();
    }

    void filter(int i) {
        currentFilter = i;
        if (i == -1) {
            currentDisplayDownloads = allDownloads;
        } else {
            currentDisplayDownloads = new ArrayList<Download>();
            for (Download item : allDownloads) {
                if (item.downloadingPausedCompleteFlag == i) {
                    currentDisplayDownloads.add(item);
                }
            }
        }
        getCategoryCount();
        updateData();
    }

    private void getCategoryCount() {
        int size = allDownloads.size();
        myDownloadFilter1.jToggleButtonALL.setText("All (" + size + ")");
        myDownloadFilter1.jToggleButtonALL.setEnabled(size > 0);

        int totalInCategory = getTotalInCategory(Download.FLAG_COMPLETED);
        myDownloadFilter1.jToggleButtonCompleted.setText("Completed (" + totalInCategory + ")");
        myDownloadFilter1.jToggleButtonCompleted.setEnabled(totalInCategory > 0);

        int totalInCategory2 = getTotalInCategory(Download.FLAG_DOWNLOADING);
        myDownloadFilter1.jToggleButtonDownloading.setText("Downloading (" + totalInCategory2 + ")");
        myDownloadFilter1.jToggleButtonDownloading.setEnabled(totalInCategory2 > 0);
    }

    private int getTotalInCategory(int i) {
        int no = 0;
        for (Download item : allDownloads) {
            if (item.downloadingPausedCompleteFlag == i) {
                no++;
            }
        }
        return no;
    }

    private class UpdateDownloadStatusThread extends Thread {

        @Override
        public void run() {
            while (self.isVisible()) {
//            	System.out.println("UpdateDownloadStatusThread");
                try {
                    if (MainUI.getInstance().isVisible()) {
                        if (allDownloads.size() != DownloadController.getStatusFromCore().size()) {
                            refreshCompletely();
                        } else {
                            updateDataNotReAdded();
                        }
                    }
                    Thread.sleep(1000);
                } catch (Exception e) {
                    LOG.error("can not perform update UI on mydownload " + e.getMessage(), e);
                }
            }
        }
    }
}
